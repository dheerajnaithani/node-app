name: "Build and deploy to EC2"

on:
  push:
    branches:
      - staging
jobs:
  init:
    runs-on: ubuntu-latest
    name: Setup XeniApp Deployment Environment
    steps:
      - name: Set env to dev
        if: endsWith(github.ref, '/staging')
        run: |
          echo "XENIENV_NAME=dev" >> $GITHUB_ENV
          echo "XENIENV_NAME=dev" >> env.txt
      - name: Set env to prod
        if: endsWith(github.ref, '/main')
        run: |
          echo "XENIENV_NAME=prod" >> $GITHUB_ENV
          echo "XENIENV_NAME=prod" >> env.txt
      - name: Set App Name
        run: echo "APP_NAME=Xeniapp-backend-${{ env.XENIENV_NAME }}" >> env.txt
      - name: Set Bucket Name
        run:  echo "S3-BUCKET=xeniapp-backend-codedeploy-${{ env.XENIENV_NAME }}" >> env.txt
      - name: Set File Name
        run: echo "S3-FILENAME=${{ env.XENIENV_NAME }}/backend-$(date --iso-8601=seconds)Z.tgz" >> env.txt # npm pack all generates a tgz
      - name: Set Deploy Group
        run: echo "DEPLOY-GROUP=Xeniapp-backend-dep-group-${{ env.XENIENV_NAME }}" >> env.txt
      - name: Upload env-vars
        uses: actions/upload-artifact@v2
        with:
          name: env-vars
          path: env.txt

  build-test-and-upload:
    needs: init
    runs-on: ubuntu-latest
    steps:
      - name: Download env-vars
        uses: actions/download-artifact@v2
        with:
          name: env-vars
      - name: Set Env vars
        run: cat env.txt >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Packages
        run: yarn install

      - name: Run ESLint
        run: yarn run lint

      - name: Run Prettier
        run: yarn run format:check
      - name: Create package
        run : node node_modules/.bin/npm-pack-all --output ${{ env.S3-FILENAME }}

      - name: Set Up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: AWS Deploy push
        run: |
          aws deploy push \
          --application-name ${{ env.APP_NAME }} \
          --description "This is a revision for the ${{ env.APP_NAME }}-${{ github.sha }}" \
          --ignore-hidden-files \
          --s3-location s3://${{ env.S3-BUCKET }}/${{ env.S3-FILENAME }} \
          --source .
      # Create deployment to CodeDeploy
      - name: AWS Create Deployment
        run: |
          aws deploy create-deployment \
           --application-name ${{ env.APP_NAME }} \
           --deployment-config-name CodeDeployDefault.OneAtATime \
           --deployment-group-name ${{ env.DEPLOY-GROUP }} \
           --file-exists-behavior OVERWRITE \
           --s3-location bucket=${{ env.S3-BUCKET }},key=${{ env.S3-FILENAME }},bundleType=tgz \
